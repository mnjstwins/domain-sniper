#!/usr/bin/env python
import sys
from optparse import OptionParser
import argparse
from openprovider import api

parser = argparse.ArgumentParser()
parser.add_argument('domain', metavar='domain', nargs='+',
                   help='domain(s) which should be checked', default='example.com')
parser.add_argument('-p', '--password', metavar='password',
                   help='password for authentication')
parser.add_argument('-u', '--username', metavar='username',
                   help='username for authentication')
parser.add_argument('--hash', metavar='hash',
                   help='hash for authentication')

parser.add_argument('-r','--register', default=False, action='store_true',
                   help='Register domain if available')
parser.add_argument('--handle', metavar='handle',
                   help='Handle for registering domain (eg: SR003891-NL)')

args = parser.parse_args()

print args

auth = {}
if not args.hash and not args.password:
    sys.exit('Please provide authentication details')

if args.hash:
    auth = {
        'username': args.username,
        'hash': args.hash
    }
else:
    auth = {
        'username': args.username,
        'password': args.password
    }


client = api('https://api.openprovider.eu', auth=auth)
domains = []
for arg in args.domain:
    domain = arg.split('.')
    domain = {
        'name': domain[-2],
        'extension': domain[-1]
    }
    domains.append(domain)

data = client.checkDomainRequest(domains=domains)
for row in data:
    if 'reason' in row:
        sys.stdout.write(' '.join([row['domain'], row['status'], row['reason']]))
    else:
        sys.stdout.write(' '.join([row['domain'], row['status']]))

    if args.register and row['status'] == 'free':
        register = {
            'ownerHandle': args.handle,
            'adminHandle': args.handle,
            'techHandle': args.handle,
            'billingHandle': args.handle,
            'domain': {
                'name': row['domain'].split('.')[-2],
                'extension': row['domain'].split('.')[-1]
            }
            ,
            'period': '1',
        }
        response = client.createDomainRequest(**register)
        sys.stdout.write(response['authCode'])

    sys.stdout.write('\n')
